repositories {
	mavenCentral()
}
buildscript {
	repositories {
		mavenCentral()
	}
}

buildscript {
	dependencies {
		classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.8.2'
	}
}

apply plugin: 'java'

subprojects {
	repositories {
		mavenCentral()
	}
 
	buildscript {
		repositories {
			mavenCentral()
		}
	}
 
	apply plugin: 'java'
 
	group 'name.valery1707.drebedengi'
	version '0.1.0-SNAPSHOT'
 
	buildscript {
		ext {
			libSpringVersion = '4.3.8.RELEASE'
			libSpringBootVersion = '1.5.3.RELEASE'
			libJUnitVersion = '4.11'
		}
	}
 
	sourceCompatibility = JavaVersion.VERSION_1_8
	targetCompatibility = JavaVersion.VERSION_1_8
	tasks.withType(JavaCompile) {
		options.encoding = "UTF-8"
	}
 
	dependencies {
		//Logging
		compile 'org.slf4j:slf4j-api:1.7.25'
		runtime 'org.slf4j:jcl-over-slf4j:1.7.25'
		runtime 'ch.qos.logback:logback-classic:1.2.2'
		runtime 'ch.qos.logback:logback-core:1.2.2'

		//Apache commons
		compile 'org.apache.commons:commons-lang3:3.5'
		compile 'commons-net:commons-net:3.6'
		compile 'commons-io:commons-io:2.5'
		compile 'commons-validator:commons-validator:1.6'

		//Improved Java lib
		compile 'io.javaslang:javaslang:2.0.6'

		//Useful annotations
		compile 'com.google.code.findbugs:jsr305:3.0.2'
		compile 'org.jetbrains:annotations:15.0'
		compile 'javax.inject:javax.inject:1'

		//Validation
		compile 'javax.validation:validation-api:1.1.0.Final'
		compile 'org.hibernate:hibernate-validator:5.4.1.Final'
		compile 'javax.el:javax.el-api:3.0.0'

		//Testing
		testCompile "junit:junit:$libJUnitVersion"
		testCompile "org.mockito:mockito-core:2.8.9"
		testCompile "org.hamcrest:hamcrest-core:1.3"
		testCompile "org.hamcrest:hamcrest-library:1.3"
		testCompile "org.springframework:spring-test:$libSpringVersion"
		testCompile "org.springframework.security:spring-security-test:4.2.2.RELEASE"
		testCompile "com.jayway.jsonpath:json-path:2.2.0"
		testCompile "com.jayway.jsonpath:json-path-assert:2.2.0"
		testCompile 'org.assertj:assertj-core:3.8.0'
	}
	configurations {
		all*.exclude group: 'commons-logging'
	}

	apply plugin: 'jacoco'
	apply plugin: 'com.github.kt3k.coveralls'
	jacoco {
		toolVersion = "0.7.6.201602180812"
	}
	jacocoTestReport {
		reports {
			xml.enabled = true // coveralls plugin depends on xml format report
			html.enabled = true
		}
	}
}

// https://github.com/ben-manes/caffeine/blob/master/build.gradle
apply plugin: 'com.github.kt3k.coveralls'
apply plugin: 'jacoco'

// Only report code coverage for projects that are distributed
def publishedProjects = subprojects.findAll { it.path != ':ignored' }

task jacocoRootReport(type: JacocoReport, group: 'Coverage reports') {
	description = 'Generates an aggregate report from all subprojects'
	dependsOn publishedProjects.test

	additionalSourceDirs = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	sourceDirectories = files(publishedProjects.sourceSets.main.allSource.srcDirs)
	classDirectories = files(publishedProjects.sourceSets.main.output)
	executionData = files(publishedProjects.jacocoTestReport.executionData)

	reports {
		html.enabled = true // human readable
		xml.enabled = true // required by coveralls
	}

	doFirst {
		executionData = files(executionData.findAll { it.exists() })
	}
}

coveralls {
	sourceDirs = publishedProjects.sourceSets.main.allSource.srcDirs.flatten()
	jacocoReportPath = "${buildDir}/reports/jacoco/jacocoRootReport/jacocoRootReport.xml"
}

tasks.coveralls {
	group = 'Coverage reports'
	description = 'Uploads the aggregated coverage report to Coveralls'

	dependsOn jacocoRootReport
	onlyIf { System.env.'CI' }
}

// https://github.com/ben-manes/gradle-versions-plugin
apply plugin: 'com.github.ben-manes.versions'
buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath 'com.github.ben-manes:gradle-versions-plugin:0.17.0'
	}
}

task wrapper(type: Wrapper) {
	gradleVersion = "4.0"
}
